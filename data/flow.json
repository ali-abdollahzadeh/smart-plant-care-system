[
  {
    "id": "b2feebbb21091c3d",
    "type": "tab",
    "label": "Smart Plant Monitor",
    "disabled": false,
    "info": "",
    "env": []
  },
  {
    "id": "mqtt_broker",
    "type": "mqtt-broker",
    "name": "MQTT Broker",
    "broker": "mqtt-broker",
    "port": "1883",
    "clientid": "",
    "autoConnect": true,
    "usetls": false,
    "compatmode": false,
    "protocolVersion": "4",
    "keepalive": "60",
    "cleansession": true
  },
  {
    "id": "dashboard_group",
    "type": "ui_group",
    "name": "Plant Dashboard",
    "tab": "dashboard_tab",
    "order": 1,
    "disp": true,
    "width": "12",
    "collapse": false
  },
  {
    "id": "dashboard_tab",
    "type": "ui_tab",
    "name": "Smart Plant Care",
    "icon": "dashboard",
    "order": 1
  },
  {
    "id": "58990b90cb22d069",
    "type": "mqtt in",
    "z": "b2feebbb21091c3d",
    "name": "Sensor Data",
    "topic": "plant/sensor",
    "qos": "2",
    "datatype": "json",
    "broker": "mqtt_broker",
    "nl": false,
    "rap": false,
    "inputs": 0,
    "x": 160,
    "y": 180,
    "wires": [
      [
        "be8866fedac205e0"
      ]
    ]
  },
  {
    "id": "be8866fedac205e0",
    "type": "function",
    "z": "b2feebbb21091c3d",
    "name": "Store Latest Sensor Data",
    "func": "let plantData = flow.get('plantData') || {};\nplantData[msg.payload.plant_id] = msg.payload;\nflow.set('plantData', plantData);\nreturn {payload: null};",
    "outputs": 1,
    "x": 390,
    "y": 180,
    "wires": [
      [
        "7dbe3a0ba4863bb6",
        "949611e0744fdbd0",
        "switch_threshold_temp"
      ]
    ]
  },
  {
    "id": "7dbe3a0ba4863bb6",
    "type": "change",
    "z": "b2feebbb21091c3d",
    "name": "Set topic: plants",
    "rules": [
      {
        "t": "set",
        "p": "topic",
        "pt": "msg",
        "to": "plants",
        "tot": "str"
      }
    ],
    "x": 640,
    "y": 140,
    "wires": [
      [
        "ee9dbf93e3e5bfa7"
      ]
    ]
  },
  {
    "id": "949611e0744fdbd0",
    "type": "change",
    "z": "b2feebbb21091c3d",
    "name": "Set topic: users",
    "rules": [
      {
        "t": "set",
        "p": "topic",
        "pt": "msg",
        "to": "users",
        "tot": "str"
      }
    ],
    "x": 640,
    "y": 220,
    "wires": [
      [
        "9d77ac97e1f6695b"
      ]
    ]
  },
  {
    "id": "ee9dbf93e3e5bfa7",
    "type": "http request",
    "z": "b2feebbb21091c3d",
    "name": "Get Plant Info",
    "method": "GET",
    "ret": "obj",
    "url": "http://catalogue-service:5000/plants",
    "x": 880,
    "y": 140,
    "wires": [
      [
        "59835f3350abfffb"
      ]
    ]
  },
  {
    "id": "9d77ac97e1f6695b",
    "type": "http request",
    "z": "b2feebbb21091c3d",
    "name": "Get Users",
    "method": "GET",
    "ret": "obj",
    "url": "http://catalogue-service:5000/users",
    "x": 880,
    "y": 220,
    "wires": [
      [
        "59835f3350abfffb"
      ]
    ]
  },
  {
    "id": "59835f3350abfffb",
    "type": "join",
    "z": "b2feebbb21091c3d",
    "name": "Join Users + Plants",
    "mode": "manual",
    "build": "object",
    "property": "payload",
    "propertyType": "msg",
    "key": "topic",
    "joiner": "\\n",
    "joinerType": "str",
    "accumulate": false,
    "timeout": "",
    "count": "2",
    "reduceRight": false,
    "reduceExp": "",
    "reduceInit": "",
    "reduceInitType": "",
    "x": 1130,
    "y": 180,
    "wires": [
      [
        "aa702f09747bad19"
      ]
    ]
  },
  {
    "id": "aa702f09747bad19",
    "type": "function",
    "z": "b2feebbb21091c3d",
    "name": "Dashboard Logic",
    "func": "let plantData = flow.get('plantData') || {};\nlet plants = msg.payload.plants;\nlet users = msg.payload.users;\n\nlet userMap = {};\nfor (let user of users) {\n    userMap[user.id] = user.display_name;\n}\n\nlet cards = [];\n\nfor (let plant of plants) {\n    if (!plant.user_id) continue;\n\n    let data = plantData[plant.id] || {};\n    let displayName = userMap[plant.user_id] || 'Unknown';\n\n    cards.push({\n        id: plant.id,\n        name: plant.name,\n        species: plant.species,\n        user: displayName,\n        temperature: data.temperature || '-',\n        humidity: data.humidity || '-',\n        soil_moisture: data.soil_moisture || '-',\n        lighting: data.lighting || '-',\n        watering: data.watering || false\n    });\n}\n\nmsg.cards = cards;\nreturn msg;",
    "outputs": 1,
    "x": 1380,
    "y": 180,
    "wires": [
      [
        "91615befb928b290"
      ]
    ]
  },
  {
    "id": "91615befb928b290",
    "type": "ui_template",
    "z": "b2feebbb21091c3d",
    "group": "dashboard_group",
    "name": "Plant Cards - Modern UI",
    "order": 1,
    "width": "12",
    "height": "8",
    "format": "<style>\n  .plant-card {\n    background-color: #ffffff;\n    border: 1px solid #e0e0e0;\n    border-radius: 16px;\n    padding: 20px;\n    margin-bottom: 16px;\n    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.05);\n    font-family: 'Segoe UI', sans-serif;\n    transition: box-shadow 0.3s ease;\n  }\n  .plant-card:hover {\n    box-shadow: 0 6px 20px rgba(0, 0, 0, 0.1);\n  }\n  .plant-header {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    margin-bottom: 10px;\n  }\n  .plant-name {\n    font-size: 18px;\n    font-weight: 600;\n    color: #333;\n  }\n  .user-chip {\n    background: #e8f0fe;\n    color: #1967d2;\n    padding: 4px 10px;\n    border-radius: 12px;\n    font-size: 13px;\n  }\n  .plant-info {\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    gap: 8px 16px;\n    font-size: 14px;\n    color: #444;\n  }\n  .plant-info div b {\n    display: block;\n    font-weight: 500;\n    margin-bottom: 2px;\n    color: #111;\n  }\n  .plant-actions {\n    margin-top: 16px;\n    display: flex;\n    gap: 10px;\n  }\n    .chatgpt-button {\n    background-color: #f1f1f1;\n    border: 1px solid #d4d4d4;\n    border-radius: 999px;\n    padding: 8px 20px;\n    font-size: 14px;\n    font-weight: 500;\n    color: #333;\n    cursor: pointer;\n    transition: background-color 0.2s ease, box-shadow 0.2s ease;\n    margin-right: 10px;\n  }\n\n  .chatgpt-button:hover {\n    background-color: #e2e2e2;\n    box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);\n  }\n\n  .chatgpt-button:active {\n    background-color: #dcdcdc;\n  }\n</style>\n\n<div ng-repeat=\"card in msg.cards\" class=\"plant-card\">\n  <div class=\"plant-header\">\n    <div class=\"plant-name\">{{card.name}} <small>({{card.species}})</small></div>\n    <div ng-if=\"card.user\" class=\"user-chip\">{{card.user}}</div>\n  </div>\n  <div class=\"plant-info\">\n    <div><b>Temperature</b>{{card.temperature}} Â°C</div>\n    <div><b>Humidity</b>{{card.humidity}} %</div>\n    <div><b>Soil Moisture</b>{{card.soil_moisture}}</div>\n    <div><b>Lighting</b>{{card.lighting}}</div>\n    <div><b>Watering</b>{{card.watering}}</div>\n  </div>\n<div class=\"plant-actions\">\n  <button class=\"chatgpt-button\" ng-click=\"send({payload: {plant_id: card.id, action: 'water', value: true}})\">\n    ðŸ’§ Water\n  </button>\n  <button class=\"chatgpt-button\" ng-click=\"send({payload: {plant_id: card.id, action: 'led', value: 'toggle'}})\">\n    ðŸ’¡ Toggle Light\n  </button>\n</div>\n\n</div>",
    "storeOutMessages": true,
    "fwdInMessages": true,
    "resendOnRefresh": true,
    "templateScope": "local",
    "className": "",
    "x": 1630,
    "y": 180,
    "wires": [
      [
        "c32441448438b783"
      ]
    ]
  },
  {
    "id": "c32441448438b783",
    "type": "http request",
    "z": "b2feebbb21091c3d",
    "name": "Send Actuator Command",
    "method": "POST",
    "ret": "obj",
    "url": "http://sensor-service:5002/actuator",
    "headers": [
      {
        "keyType": "Content-Type",
        "keyValue": "application/json"
      }
    ],
    "x": 1860,
    "y": 180,
    "wires": [
      [
        "2ee7c058c72b8bc0"
      ]
    ]
  },
  {
    "id": "2ee7c058c72b8bc0",
    "type": "function",
    "z": "b2feebbb21091c3d",
    "name": "Trigger Refresh",
    "func": "// Immediately refresh plant info after command\nreturn { payload: null };",
    "outputs": 1,
    "x": 2100,
    "y": 180,
    "wires": [
      [
        "be8866fedac205e0"
      ]
    ]
  },
  {
    "id": "switch_threshold_temp",
    "type": "switch",
    "z": "b2feebbb21091c3d",
    "name": "Check Temp > 30Â°C",
    "property": "payload.temperature",
    "propertyType": "msg",
    "rules": [
      {
        "t": "gt",
        "v": "30",
        "vt": "num"
      }
    ],
    "checkall": "true",
    "repair": false,
    "outputs": 1,
    "x": 650,
    "y": 300,
    "wires": [
      [
        "prepare_alert_payload"
      ]
    ]
  },
  {
    "id": "prepare_alert_payload",
    "type": "change",
    "z": "b2feebbb21091c3d",
    "name": "Prepare Alert Payload",
    "rules": [
      {
        "t": "set",
        "p": "payload",
        "pt": "msg",
        "to": "{\"plant_name\": \"{{payload.plant_name}}\", \"location\": \"{{payload.location}}\", \"problem\": \"Temperature too high\"}",
        "tot": "json"
      }
    ],
    "x": 900,
    "y": 260,
    "wires": [
      [
        "send_telegram_alert"
      ]
    ]
  },
  {
    "id": "send_telegram_alert",
    "type": "http request",
    "z": "b2feebbb21091c3d",
    "name": "Send Alert to Telegram",
    "method": "POST",
    "ret": "txt",
    "paytoqs": "ignore",
    "url": "http://telegrambot:5500/notify",
    "tls": "",
    "persist": false,
    "proxy": "",
    "authType": "",
    "senderr": false,
    "headers": [
      {
        "keyType": "Content-Type",
        "keyValue": "application/json"
      }
    ],
    "x": 1150,
    "y": 300,
    "wires": [
      []
    ]
  }
]